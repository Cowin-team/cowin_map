{"version":3,"sources":["webpack://the_cowin_map/./assets/js/src/locations/covidBedLocation.js","webpack://the_cowin_map/./assets/js/src/city.js","webpack://the_cowin_map/./assets/js/src/markers/covidBedMarker.js","webpack://the_cowin_map/./assets/js/src/entry/index.js","webpack://the_cowin_map/./assets/js/src/cowinMap.js","webpack://the_cowin_map/./assets/js/src/mapFilters.js"],"names":["constructor","name","spreadsheetIds","afterFetchCallback","this","covidBedLocations","covidBedMarkers","fetchCovidBedData","sheetUrl","covidBeds","fetch","then","response","json","data","values","forEach","dataRow","covidBedLocation","title","latitude","parseFloat","longitude","url","covidbed","undefined","oxybed","icu","venti","updatedAt","position","lat","lng","hasCovidBeds","hasAttribute","hasOxygenBeds","hasICUs","hasVentilators","attr","isNaN","push","location","marker","google","maps","Marker","map","descriptionHtml","setMap","window","initialiseMap","cowinMap","markerInfoWindow","InfoWindow","content","cowinMapMarkers","bounds","LatLngBounds","mapFilters","onChangeCallback","state","shouldHaveCovidBeds","shouldHaveOxygenBeds","shouldHaveICUs","shouldHaveVentilators","setEventListeners","getCurrentSelection","that","document","querySelectorAll","filter_chkbx","addEventListener","event","filterChanged","target","checkedCheckboxElem","filterName","dataset","checked","newFiltersState","plotAllCowinMapMarkers","Map","getElementById","zoom","center","LatLng","setupAndPlotCowinMapMarker","cowinMapMarker","addListener","setContent","open","plotCowinMapMarker","shouldRenderMarker","filters","extend","fitBounds","afterCityDataFetchCallback","City"],"mappings":"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","file":"index.js","sourcesContent":["class CovidBedLocation {\n  constructor(dataRow) {\n    this.title     = dataRow[0];\n    this.latitude  = parseFloat(dataRow[2]);\n    this.longitude = parseFloat(dataRow[3]);\n    this.url       = dataRow[4];\n    this.covidbed  = (dataRow[5] === undefined ? \"N/A\" : dataRow[5]);\n    this.oxybed    = (dataRow[6] === undefined ? \"N/A\" : dataRow[6]);\n    this.icu       = (dataRow[7] === undefined ? \"N/A\" : dataRow[7]);\n    this.venti     = (dataRow[8] === undefined ? \"N/A\" : dataRow[8]);\n    this.updatedAt = dataRow[9];\n\n    this.position       = { lat: this.latitude, lng: this.longitude };\n    this.hasCovidBeds   = this.hasAttribute(\"covidbed\");\n    this.hasOxygenBeds  = this.hasAttribute(\"oxybed\");\n    this.hasICUs        = this.hasAttribute(\"icu\");\n    this.hasVentilators = this.hasAttribute(\"venti\");\n  }\n\n  hasAttribute(attr) {\n    if (this[attr] === undefined || this[attr] === \"\") {\n      return false;\n    }\n    if (isNaN(this[attr])) { return false; }\n    if (parseFloat(this[attr]) < 1) { return false; }\n\n    return true;\n  }\n}\n\nexport default CovidBedLocation;\n","const sheetsApiKey = \"AIzaSyClGVndCtMIDvZ7GdE1fO5OPQL5XdtMvVM\";\nimport CovidBedLocation from './locations/covidBedLocation';\nimport CovidBedMarker from './markers/covidBedMarker';\n\nclass City {\n  constructor(name, spreadsheetIds, afterFetchCallback) {\n    this.name               = name;\n    this.spreadsheetIds     = spreadsheetIds;\n    this.covidBedLocations  = [];\n    this.covidBedMarkers    = [];\n    this.afterFetchCallback = afterFetchCallback;\n\n    this.fetchCovidBedData();\n  }\n\n  fetchCovidBedData() {\n    let sheetUrl = \"https://sheets.googleapis.com/v4/spreadsheets/\"+\n      `${this.spreadsheetIds.covidBeds}/values/Sheet1!A2:Q?key=${sheetsApiKey}`\n\n    fetch(sheetUrl)\n      .then(response => response.json())\n      .then(data => {\n        data.values.forEach((dataRow) => {\n          let covidBedLocation = new CovidBedLocation(dataRow);\n          this.covidBedLocations.push(covidBedLocation);\n          this.covidBedMarkers.push(new CovidBedMarker(covidBedLocation));\n        });\n\n        this.afterFetchCallback(this.covidBedMarkers);\n      });\n  }\n}\n\nexport default City;\n","class CovidBedMarker {\n  constructor(location) {\n    this.location = location;\n    this.marker = new google.maps.Marker({\n      position: location.position,\n      map: null,\n      title: location.title\n    });\n    this.position = this.marker.position;\n\n    this.descriptionHtml = `\n      <div class=\"content\">\n        <h5 class=\"title is-5 mb-0\">\n         ${(location.url === undefined) ? location.title : ('<a href=\"' + location.url +'\">' + location.title + '</a>')}\n        </h5>\n        <p class=\"is-size-7 mt-1\">Updated at: ${location.updatedAt}</p>\n        <table class=\"table has-text-left is-striped is-narrow is-hoverable\">\n          <tr><th>COVID Beds: </th><td>${location.covidbed}</td></tr>\n          <tr><th>Oxygen Beds: </th><td>${location.oxybed}</td></tr>\n          <tr><th>ICUs: </th><td>${location.icu}</td></tr>\n          <tr><th>Ventilators: </th><td>${location.venti}</td></tr>\n        </table>\n      </div>\n    `\n  }\n\n  setMap(map) {\n    this.marker.setMap(map);\n  }\n}\n\nexport default CovidBedMarker;\n","import City from '../city'\nimport CowinMap from '../cowinMap'\n\nfunction initialiseMap() {\n  let cowinMap = new CowinMap();\n\n  let afterCityDataFetchCallback = (cowinMapMarkers) => {\n    cowinMapMarkers.forEach((cowinMapMarker) => {\n      cowinMap.setupAndPlotCowinMapMarker(cowinMapMarker);\n    });\n    cowinMap.plotAllCowinMapMarkers();\n  };\n\n  let coimbatorCity = new City(\n    \"coimbatore\",\n    {\n      covidBeds: \"1WW1Lu7S8zP85Qzv-Pn7gp_KUxPJZzvrXnGoWOkwcdbw\"\n    },\n    afterCityDataFetchCallback\n  );\n\n  let tiripurCity = new City(\n    \"tirupur\",\n    {\n      covidBeds: \"1T5fUP5nhCctC2bpNWeO4Yg2UYrewbTxrGh58c2zJePU\"\n    },\n    afterCityDataFetchCallback\n  );\n\n  let maduraiCity = new City(\n    \"Madurai\",\n    {\n      covidBeds: \"1Dr7DYS6GKe5avhHcwhHMB6Z9DTFSj20eEgLvfBlQJSo\"\n    },\n    afterCityDataFetchCallback\n  );\n}\nwindow.initialiseMap = initialiseMap;\n","import MapFilters from './mapFilters';\n\nclass CowinMap {\n  constructor() {\n    this.map = null;\n    this.initialiseMap();\n    this.markerInfoWindow = new google.maps.InfoWindow({ content: \"\" });\n    this.cowinMapMarkers = [];\n    this.bounds = new google.maps.LatLngBounds();\n    this.mapFilters = new MapFilters((newFiltersState) => {\n      this.plotAllCowinMapMarkers();\n    });\n  }\n\n  initialiseMap() {\n    // Center on (0, 0). Map center and zoom will reconfigure later (fitbounds method)\n    this.map = new google.maps.Map(document.getElementById('map'), {\n      zoom: 10,\n      center: new google.maps.LatLng(0, 0)\n    });\n  }\n\n  setupAndPlotCowinMapMarker(cowinMapMarker) {\n    google.maps.event.addListener(cowinMapMarker.marker, 'click', () => {\n      this.markerInfoWindow.setContent(cowinMapMarker.descriptionHtml);\n      this.markerInfoWindow.open(this.map, cowinMapMarker.marker);\n    });\n    this.cowinMapMarkers.push(cowinMapMarker);\n  };\n\n  plotCowinMapMarker(cowinMapMarker) {\n    let shouldRenderMarker = true;\n\n    let filters = this.mapFilters.getCurrentSelection();\n    if ((filters.shouldHaveCovidBeds && !cowinMapMarker.location.hasCovidBeds) ||\n      (filters.shouldHaveOxygenBeds && !cowinMapMarker.location.hasOxygenBeds) ||\n      (filters.shouldHaveICUs && !cowinMapMarker.location.hasICUs) ||\n      (filters.shouldHaveVentilators && !cowinMapMarker.location.hasVentilators)) {\n\n      shouldRenderMarker = false;\n    }\n\n    if (shouldRenderMarker) {\n      cowinMapMarker.setMap(this.map);\n      if (!isNaN(cowinMapMarker.location.latitude) && !isNaN(cowinMapMarker.location.longitude)) {\n        this.bounds.extend(cowinMapMarker.position);\n      }\n    } else {\n      cowinMapMarker.setMap(null);\n    }\n  }\n\n  plotAllCowinMapMarkers() {\n    this.cowinMapMarkers.forEach((cowinMapMarker) => {\n      this.plotCowinMapMarker(cowinMapMarker);\n    });\n\n    this.map.fitBounds(this.bounds);\n  }\n}\n\nexport default CowinMap;\n","class MapFilters {\n  constructor(onChangeCallback) {\n    this.state = {\n      shouldHaveCovidBeds: false,\n      shouldHaveOxygenBeds: false,\n      shouldHaveICUs: false,\n      shouldHaveVentilators: false\n    };\n    this.setEventListeners();\n    this.onChangeCallback = onChangeCallback;\n  }\n\n  getCurrentSelection() {\n    return this.state;\n  }\n\n  setEventListeners() {\n    let that = this;\n    document.querySelectorAll(\".filters_form input\").forEach(function(filter_chkbx) {\n      filter_chkbx.addEventListener(\"change\", (event) => { that.filterChanged(event.target) });\n    });\n  }\n\n  filterChanged(checkedCheckboxElem) {\n    let filterName = checkedCheckboxElem.dataset.filterName;\n    if (filterName == \"show_covid_beds\")  {\n      this.state.shouldHaveCovidBeds = checkedCheckboxElem.checked;\n    } else if (filterName == \"show_oxygen_beds\")  {\n      this.state.shouldHaveOxygenBeds = checkedCheckboxElem.checked;\n    } else if (filterName == \"show_icus\")  {\n      this.state.shouldHaveICUs = checkedCheckboxElem.checked;\n    } else if (filterName == \"show_ventilators\")  {\n      this.state.shouldHaveVentilators = checkedCheckboxElem.checked;\n    }\n\n    this.onChangeCallback(this.state);\n  }\n}\n\nexport default MapFilters;\n"],"sourceRoot":""}
{"version":3,"sources":["webpack://the_cowin_map/./assets/js/src/filters.js","webpack://the_cowin_map/./assets/js/src/entry/map.js"],"names":["map","constructor","this","state","shouldHaveCovidBeds","shouldHaveOxygenBeds","shouldHaveICUs","shouldHaveVentilators","getCurrentSelection","setEventListeners","that","document","querySelectorAll","forEach","filter_chkbx","console","log","addEventListener","event","filterChanged","target","checkedCheckboxElem","filterName","dataset","checked","CustomEvent","detail","checkedFilterNames","window","dispatchEvent","locations","allCowinMarkers","locationFromDataRow","dataRow","location","title","latitude","parseFloat","longitude","url","covidbed","oxybed","icu","venti","updatedAt","undefined","drawMarkers","options","cowinMarkers","bounds","google","maps","LatLngBounds","cowinMarker","shouldRenderMarker","hasCovidBeds","hasOxygenBeds","hasICUs","hasVentilators","mapMarker","setMap","isNaN","extend","position","fitBounds","createCowinMarker","infowindow","lat","lng","Marker","descriptionHtml","hasAttribute","attr","addListener","setContent","open","mapFilters","initialiseMap","Map","getElementById","zoom","center","LatLng","InfoWindow","content","cities","coimbatore","bedsSpreadheetId","tripur","cityName","sheetUrl","$","getJSON","data","values","push"],"mappings":"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","file":"map.js","sourcesContent":["class MapFilters {\n  constructor() {\n    this.state = {\n      shouldHaveCovidBeds: false,\n      shouldHaveOxygenBeds: false,\n      shouldHaveICUs: false,\n      shouldHaveVentilators: false\n    };\n  }\n\n  getCurrentSelection() {\n    return this.state;\n  }\n\n  setEventListeners() {\n    let that = this;\n    document.querySelectorAll(\".filters_form input\").forEach(function(filter_chkbx) {\n      console.log(filter_chkbx);\n      filter_chkbx.addEventListener(\"change\", (event) => { that.filterChanged(event.target) });\n    });\n  }\n\n  filterChanged(checkedCheckboxElem) {\n    let filterName = checkedCheckboxElem.dataset.filterName;\n    if (filterName == \"show_covid_beds\")  {\n      this.state.shouldHaveCovidBeds = checkedCheckboxElem.checked;\n    } else if (filterName == \"show_oxygen_beds\")  {\n      this.state.shouldHaveOxygenBeds = checkedCheckboxElem.checked;\n    } else if (filterName == \"show_icus\")  {\n      this.state.shouldHaveICUs = checkedCheckboxElem.checked;\n    } else if (filterName == \"show_ventilators\")  {\n      this.state.shouldHaveVentilators = checkedCheckboxElem.checked;\n    }\n\n    var event = new CustomEvent(\"filtersChanged\", { detail: { checkedFilterNames: [] } });\n    window.dispatchEvent(event);\n  }\n}\n\nvar mapFilters = new MapFilters();\n\nexport default mapFilters;\n\n","import mapFilters from '../filters'\n\nvar map;\nvar locations = [];\nvar allCowinMarkers = [];\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  mapFilters.setEventListeners();\n});\n\nwindow.addEventListener(\"filtersChanged\", function(event){\n  drawMarkers(mapFilters.getCurrentSelection(), allCowinMarkers);\n});\n\nfunction locationFromDataRow(dataRow) {\n  let location = {\n    title: dataRow[0],\n    latitude: parseFloat(dataRow[2]),\n    longitude: parseFloat(dataRow[3]),\n    // institution: dataRow[3],\n    // department: dataRow[4],\n    // funder: dataRow[0],\n    url: dataRow[4],\n    covidbed: dataRow[5],\n    oxybed: dataRow[6],\n    icu: dataRow[7],\n    venti: dataRow[8],\n    updatedAt: dataRow[9]\n  }\n\n  if (location.covidbed === undefined) { location.covidbed = \"N/A\" };\n  if (location.oxybed === undefined) { location.oxybed = \"N/A\" };\n  if (location.icu === undefined) { location.icu = \"N/A\" };\n  if (location.venti === undefined) { location.venti = \"N/A\" };\n\n  return location;\n};\n\n\nfunction initialiseMap() {\n  // Center on (0, 0). Map center and zoom will reconfigure later (fitbounds method)\n  map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 10,\n    center: new google.maps.LatLng(0, 0)\n  });\n  let infowindow = new google.maps.InfoWindow({ content: \"Content String\" });\n\n  let cities = {\n    coimbatore: {\n      bedsSpreadheetId:  \"1WW1Lu7S8zP85Qzv-Pn7gp_KUxPJZzvrXnGoWOkwcdbw\",\n    },\n    tripur: {\n      bedsSpreadheetId: \"1T5fUP5nhCctC2bpNWeO4Yg2UYrewbTxrGh58c2zJePU\"\n    }\n  };\n  let apiKey = \"AIzaSyClGVndCtMIDvZ7GdE1fO5OPQL5XdtMvVM\";\n  for (const cityName in cities) {\n    let city = cities[cityName];\n    let sheetUrl = \"https://sheets.googleapis.com/v4/spreadsheets/\"+\n      `${city.bedsSpreadheetId}/values/Sheet1!A2:Q?key=${apiKey}`\n    $.getJSON(sheetUrl, function(data) {\n      // data.values contains the array of rows from the spreadsheet.\n      // Each row is also an array of cell values.\n      data.values.forEach(function(dataRow) {\n        let location = locationFromDataRow(dataRow);\n        locations.push(location);\n      });\n      locations.forEach(function(location){\n        allCowinMarkers.push(createCowinMarker(map, location, infowindow));\n      });\n      drawMarkers(null, allCowinMarkers);\n    });\n  }\n}\nwindow.initialiseMap = initialiseMap;\n\nfunction drawMarkers(options, cowinMarkers) {\n  let bounds = new google.maps.LatLngBounds();\n  cowinMarkers.forEach(function(cowinMarker) {\n    let shouldRenderMarker = true;\n\n    if (options != null) {\n      if ((options.shouldHaveCovidBeds && !cowinMarker.hasCovidBeds) ||\n        (options.shouldHaveOxygenBeds && !cowinMarker.hasOxygenBeds) ||\n        (options.shouldHaveICUs && !cowinMarker.hasICUs) ||\n        (options.shouldHaveVentilators && !cowinMarker.hasVentilators)) {\n\n          shouldRenderMarker = false;\n        }\n    }\n\n    if (shouldRenderMarker) {\n      cowinMarker.mapMarker.setMap(map);\n      if (!isNaN(cowinMarker.location.latitude) && !isNaN(cowinMarker.location.longitude)) {\n        bounds.extend(cowinMarker.mapMarker.position);\n      }\n    } else {\n      cowinMarker.mapMarker.setMap(null);\n    }\n  });\n  map.fitBounds(bounds);\n}\n\nfunction createCowinMarker(map, location, infowindow) {\n  // Modify the code below to suit the structure of your spreadsheet (stored in variable 'location')\n  let position = {\n    lat: parseFloat(location.latitude),\n    lng: parseFloat(location.longitude)\n  };\n  let mapMarker = new google.maps.Marker({\n    position: position,\n    map: null,\n    title: location.title\n  });\n\n  let descriptionHtml = `\n    <div class=\"content\">\n      <h5 class=\"title is-5 mb-0\">\n       ${(location.url === undefined) ? location.title : ('<a href=\"' + location.url +'\">' + location.title + '</a>')}\n      </h5>\n      <p class=\"is-size-7 mt-1\">Updated at: ${location.updatedAt}</p>\n      <table class=\"table has-text-left is-striped is-narrow is-hoverable\">\n        <tr><th>COVID Beds: </th><td>${location.covidbed}</td></tr>\n        <tr><th>Oxygen Beds: </th><td>${location.oxybed}</td></tr>\n        <tr><th>ICUs: </th><td>${location.icu}</td></tr>\n        <tr><th>Ventilators: </th><td>${location.venti}</td></tr>\n      </table>\n    </div>\n  `\n  google.maps.event.addListener(mapMarker, 'click', function() {\n    infowindow.setContent(descriptionHtml);\n    infowindow.open(map, mapMarker);\n  });\n\n  function hasAttribute(attr) {\n    if (location[attr] === undefined || location[attr] === \"\") {\n      return false;\n    }\n    if (isNaN(location[attr])) {\n      return false;\n    }\n    if (parseFloat(location[attr]) < 1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return {\n    location: location,\n    mapMarker: mapMarker,\n    hasCovidBeds: hasAttribute(\"covidbed\"),\n    hasOxygenBeds: hasAttribute(\"oxybed\"),\n    hasICUs: hasAttribute(\"icu\"),\n    hasVentilators: hasAttribute(\"venti\")\n  };\n}\n"],"sourceRoot":""}